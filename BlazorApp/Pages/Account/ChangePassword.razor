@page "/account/changepassword"
@using BlazorApp.Models
@using BlazorApp.Services
@using Radzen
@using Radzen.Blazor
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<AuthorizeView>
    <Authorized>
        <RadzenCard>
            <h3>Change Password</h3>
            <RadzenTemplateForm TItem="ChangePasswordModel" Data=@model Submit=@OnSubmit>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenTextBox @bind-Value=@model.Email Placeholder="Email" Style="width: 100%" />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-12">
                        <RadzenPassword @bind-Value=@model.CurrentPassword Placeholder="Current Password" Style="width: 100%" />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-12">
                        <RadzenPassword @bind-Value=@model.NewPassword Placeholder="New Password" Style="width: 100%" />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-12">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Change Password" ButtonStyle="ButtonStyle.Primary" 
                            Style="width: 100%" Disabled=@isBusy />
                    </div>
                </div>
            </RadzenTemplateForm>
        </RadzenCard>
    </Authorized>
    <NotAuthorized>
        <p>You're not authorized to access this page. Please <a href="/account/login">log in</a>.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private ChangePasswordModel model = new();
    private bool isBusy = false;

    private async Task OnSubmit()
    {
        isBusy = true;
        
        var result = await AuthService.ChangePassword(model);
        
        if (result.IsSuccess)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Password changed successfully",
                Duration = 4000
            });
            
            Navigation.NavigateTo("/");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = result.Message,
                Duration = 4000
            });
        }
        
        isBusy = false;
    }
}